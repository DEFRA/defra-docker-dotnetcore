name: SCAN-ON-COMMIT

on:
  push:
    branches: [ '*' ]

jobs:

  get-matrix-values:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-var.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-var
        run: |
          content=`cat ./build-matrix.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=matrix::$content"
  
  build-images:
    runs-on: ubuntu-latest
    needs:  get-matrix-values
    strategy:
      matrix: ${{fromJSON(needs.get-matrix-values.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - id: setEnv
        name: Set Job env vars 
        run: |
          cat JOB.env >> $GITHUB_ENV

      - id: setImageDetails
        name: Set image name and latest tag
        run: |
          if [ ${{matrix.target}} = "production" ]
          then 
            DOCKER_REPO_NAME=":marksoft/$IMAGE_NAME"
          else
            DOCKER_REPO_NAME=":marksoft/$IMAGE_NAME-${{matrix.target}}"
          fi
          
          echo "::set-output name=dockerRepoName::$DOCKER_REPO_NAME"
          echo "::set-output name=fullImageName:$DOCKER_REPO_NAME:$DEFRA_VERSION-dotnet${{matrix.runTimeVersion}}"

          if [ ${{matrix.latest}} = true ]
          then 
            echo "::set-output name=latestTag::--tag $DOCKER_REPO_NAME:latest"
          else
            echo "::set-output name=latestTag:: "
          fi

      - id: buildImage
      - name: Build the Docker image
        run: |
          docker build . --file Dockerfile --no-cache \
          --target=${{matrix.target}} \
          --build-arg DEFRA_VERSION=$DEFRA_VERSION \
          --build-arg BASE_VERSION=${{matrix.runtimeVersion}}-$ALPINE_VERSION  \
          --tag ${{steps.setImageDetails.outputs.fullImageName}} \
          ${{steps.setImageDetails.outputs.latestTag}}

      - id: dockerLogin
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - id: pushImage
        name: push image
        run: docker image push --all-tags ${{steps.setImageDetails.outputs.dockerRepoName}} 
      # - uses: anchore/scan-action@v1
      #   if: ${{ matrix.target == 'production' }}
      #   with:
      #     image-reference: defradigital/${{ env.IMAGE_NAME }}:${{ env.DEFRA_VERSION }}-dotnet${{ matrix.runtimeVersion }}
      #     fail-build: true
      #     custom-policy-path: ./anchore-policy.json
      #     include-app-packages: true

      # - name: Archive anchore report
      #   if: ${{ failure() && matrix.target == 'production' }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: anchore-reports-dotnet-${{ matrix.runtimeVersion }}
      #     path: anchore-reports
