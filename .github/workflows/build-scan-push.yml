name: BUILD-SCAN-PUSH

on:
  push:
    branches: [ '**' ]
  workflow_dispatch:

jobs:

  get-matrix-values:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-var.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - id: set-var
        run: |
          echo 'image<<EOF' >> $GITHUB_OUTPUT
          cat ./image-matrix.json >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

          echo 'base<<EOF' >> $GITHUB_OUTPUT
          echo '[{ "image": "sdk", "target": "development" }, { "image": "aspnet", "target": "production" }, { "image": "runtime", "target": "production" }]' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  build-images:
    runs-on: ubuntu-latest
    needs:  get-matrix-values
    strategy:
      matrix:
        base: ${{fromJSON(needs.get-matrix-values.outputs.base)}}
        image: ${{fromJSON(needs.get-matrix-values.outputs.image)}}
    steps:
      - uses: actions/checkout@v4
      - id: setEnv
        name: Set Job env vars 
        run: |
          cat JOB.env >> $GITHUB_ENV

      - id: setImageDetails
        name: Set image name and latest tag
        run: |
          if [ "${{ matrix.target.image }}" = "sdk" ]; then
            DOCKER_REPO_NAME="defradigital/$IMAGE_NAME-${{ matrix.base.target }}"
          elif [ "${{ matrix.target.image }}" = "aspnet" ]; then
            DOCKER_REPO_NAME="defradigital/$IMAGE_NAME"
          else
            DOCKER_REPO_NAME="defradigital/$IMAGE_NAME-${{ matrix.target.image }}"
          fi
          
          echo "dockerRepoName=$DOCKER_REPO_NAME" >> $GITHUB_OUTPUT
          echo "fullImageName=$DOCKER_REPO_NAME:$DEFRA_VERSION-dotnet${{matrix.image.netVersion}}" >> $GITHUB_OUTPUT

          DOCKERTAGS="$DOCKER_REPO_NAME:dotnet${{matrix.image.netVersion}}"

          if [ ${{matrix.image.latest}} = true ]
          then
            DOCKERTAGS="$DOCKERTAGS $DOCKER_REPO_NAME:latest"
          fi
          echo "dockerTags=$DOCKERTAGS" >> $GITHUB_OUTPUT

      - name: Build the Docker image
        run: |
          docker build . --file Dockerfile --no-cache \
          --target=${{matrix.base.target}} \
          --build-arg DEFRA_VERSION=$DEFRA_VERSION \
          --build-arg BASE_VERSION=${{matrix.image.netVersion}}-alpine${{matrix.image.alpineVersion}}  \
          --build-arg MCR_IMAGE=${{matrix.base.image}} \
          --tag ${{steps.setImageDetails.outputs.fullImageName}}
          docker images

      - name: Tag image
        run: |
          echo "Tags are ${{steps.setImageDetails.outputs.dockerTags}}"
          for TAG in ${{steps.setImageDetails.outputs.dockerTags}}
          do
            echo "creating tag $TAG"
            docker image tag ${{steps.setImageDetails.outputs.fullImageName}} $TAG
          done

      - name: Run Anchore Grype scan
        id: grype-scan
        if: ${{ matrix.base.target == 'production' }}
        uses: anchore/scan-action@v6
        with:
          image: ${{steps.setImageDetails.outputs.fullImageName}}
          fail-build: true
          severity-cutoff: "medium"
        continue-on-error: true

      - name: Run Aqua Trivy scan
        id: trivy-scan
        if: ${{ matrix.base.target == 'production' }}
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ${{steps.setImageDetails.outputs.fullImageName}}
          format: sarif
          output: trivy-reports-dotnet-${{ matrix.image.netVersion }}
          exit-code: 1
          vuln-type: os,library
          severity: CRITICAL,HIGH,MEDIUM
        continue-on-error: true

      - name: Upload Grype SARIF report
        if: ${{ steps.grype-scan.outcome == 'failure' && matrix.base.target == 'production' }}
        uses: actions/upload-artifact@v4
        with:
          name: grype-reports-dotnet-${{ matrix.image.netVersion }}
          path: ${{ steps.grype-scan.outputs.sarif }}

      - name: Upload Trivy SARIF report
        if: ${{ steps.trivy-scan.outcome == 'failure' && matrix.base.target == 'production' }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports-dotnet-${{ matrix.image.netVersion }}
          path: trivy-reports-dotnet-${{ matrix.image.netVersion }}

      - name: Fail build if scans failed
        if: ${{ (steps.grype-scan.outcome == 'failure' || steps.trivy-scan.outcome == 'failure') && matrix.base.target == 'production' }}
        run: |
          echo "One or more scans failed. Failing the build."
          exit 1

      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: github.ref == 'refs/heads/master'
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - id: pushImage
        name: push docker image
        if: github.ref == 'refs/heads/master'
        run: |
          docker image push ${{steps.setImageDetails.outputs.fullImageName}}
          for TAG in ${{steps.setImageDetails.outputs.dockerTags}}
          do
            docker image push $TAG
          done
